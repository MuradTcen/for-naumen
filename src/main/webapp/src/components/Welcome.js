import React from "react";
import {Jumbotron} from "react-bootstrap";

class Welcome extends React.Component {
    render() {
        return (
            <Jumbotron className="bg-dark text-white">
                <h1>Тестовое задание на стажировку Naumen (Scala)</h1>
                <p>
                    Необходимо написать приложение на Scala, которое представляет из себя http
                    сервер , предоставляющий REST API для работы с телефонным справочником со
                    следующим функционалом (бэкенд):
                    <br/>
                    - добавить телефон (строка) и имя (строка) в справочник
                    <br/>
                    - получить список ранее добавленных вхождений в справочник (кортеж
                    id, имя, номер) в виде json
                    <br/>
                    - изменить значения телефона или имени во вхождении выбранному по id
                    <br/>
                    - удалить из справочника вхождение по id
                    <br/>
                    - поиск всех вхождений по подстроке имени
                    <br/>
                    - поиск всех вхождений по подстроке номера
                    <br/>
                    <br/>
                    Пример API будет приведен в приложении.
                    <br/>
                    Минимальное работоспособное приложение может хранить все данные в
                    памяти и, соответственно, терять их при перезапуске.
                    Далее предлагаем реализовать ряд усовершенствований данного приложения.
                    Это позволит вам проявить глубину своих знаний и навыков и повысить шансы
                    попасть на стажировку. Они не обязательные и мы не ожидаем что вы их выполните
                    все. Пункты расположены в порядке приоритета (первые - самые важные и
                    показательные, их стоит делать в первую очередь). Сложность пунктов не одинаковая
                    и оцениваться они будут соответственно.
                </p>
                <br/>
                <p>
                    В первую очередь целесообразно сделать:
                    <br/>
                    1. Добавить хранение данных в реляционной БД
                    <br/>
                    2. Добавить клиентское веб-приложение - фронтенд (html, css, js, работает
                    в браузере), которое будет работать с данным API бекенда. Например,
                    html страничка, в которой с помощью javascript по ajax запрашиваются
                    данные всех ранее добавленных вхождений и отображаются списком,
                    рядом с каждым вхождением добавить кнопку его удаления. Отдельно
                    реализовать форму сохранения нового или редактирования
                    существующего вхождения. Отдельно реализовать строку поиска
                    вхождений по подстроке.
                </p>
                <br/>
                <p>
                    Затем в качестве задания "со звездочкой" для самых продвинутых предлагаем
                    реализовать что-то из следующего:
                    <br/>
                    1. Добавить в серверную часть метод API по которому асинхронно
                    происходит сохранение всех данных справочника на жесткий диск (файл
                    где данные записаны в текстовом виде, в простом и человекочитаемом
                    формате типа csv или json).
                    <br/>
                    2. Добавить валидацию на бэкенде на добавление записи (формат
                    телефонного номера в виде: +код страны номер внутри страны,
                    проверка на добавление дубля, проверка на другие некорректные
                    данные на ваше усмотрение). Дополнительно: для клиентского
                    приложения выводить на страницу сообщение об ошибке при
                    непрохождении валидации.
                    <br/>
                    3. Добавить функционал автоматического удаления вхождения через
                    некоторое заданное время (например, 1 год) после его внесения в
                    справочник.
                    <br/>
                    4. Добавить кэширование запрашиваемых из БД данных в памяти
                    приложения (самописный механизм кэширования).
                    Разрешено использование любых инструментов, библиотек и фреймворков. "При
                    отсутствии предпочтений рекомендуем использовать следующие технологии - sbt, Play
                    2 framework, Slick, postgres"
                    Важно! Работающее приложение с минимальным (но корректным) функционалом
                    важнее чем несколько неработающих задумок.
                    <br/>
                    <br/>
                    <p>
                        Что мы ожидаем от вас:
                        <br/>
                        1. Исходный код приложения (желательно в виде git-репозитория)
                        <br/>
                        2. Инструкция как развернуть окружение и запустить ваше приложение (желательно
                        чтобы инструкция была кроссплатформенной или под linux)
                        <br/>
                        3. Описание того как пользоваться вашим приложением (сценарии использования или
                        описание API и примеры запросов)
                        <br/>
                        4. Дополнительно: описание архитектуры и особенностей реализации вашего
                        приложения в свободной форме (реализация чего в вашем приложении вам нравится,
                        что вы намеренно упростили для экономии времени на реализацию, что бы вы хотели
                        улучшить в нем и как вы бы это сделали)
                    </p>
                </p>
            </Jumbotron>
        );
    }
}

export default Welcome;